Framework
=========
Frameworks are large bodies(which has many classes and interfaces) of pre written code which are used to solve a problem of specific domain

Most popular java opensource frameworks are
1. Hibernate
2. Spring
3. Struts
4. Grails
5. Ibatis
6. Toplink 
7. Wicket  and many more

Spring Framework
===============
>  Spring is a open source framework and it was developed to make  development of enterprise web application easy.
>  Spring framework was developed by "Rod johnson" in the year 2003
>Current version of spring is 5.x version
> Official website of spring is www.spring.io





Features of spring framework
========================
> lightweight 
> Dependency Injection (DI)/ Inversion of Control
> Aspect Oriented (AOP)
> Easy to test
> Non invasive
> Modular
> Easy Integration with other technologies like hibbernate, REST, JavaMail, JNDI  etc...


Spring Architecture
================
Spring consists of many modules in it 
1. Core Container
2. AOP
3. Data Access Layer
4. Web Layer
5. Test layer




Core Container
=============
> Core Container is a main component of Spring it is responsible for  managing beans
> It has bean factory to create beans
> Core to add dependencies, read config files etc..
> Context holds the beans in the memory
> SpEL (Spring Expression Language)  its a language used within config file to refer other beans

AOP (Aspect Oriented Programming)
==============================
> it is used to create application wide services like logging, security, transactions etc...
in a declarative manner without modifying the existing code.

Data Access Layer
==============
> This layer is used to communicate with any type of database
it can be relational db or nosql db (mongoDB, cassandra etc...)
> it consists of JDBC, spring provides lots of helper classes to reduce JDBC code by 50%
> it has ORM Support which helps to integrate with hibernate, JPA etc...

 note: 
JDBC (Java DataBase Connectivity)
ORM (Object Relational Mapping)
OXM (Object XML Mapping)
JMS (Java Messaging Services)


Web Layer
==========
Web module supports the development of web based application
 with a help of spring MVC etc..

Test Layer
========
The Test module supports the testing of Spring components with JUnit or TestNG frameworks.



JARS Required
=============
commons-logging-1.1.1
spring-aop-4.2.2.RELEASE
spring-aspects-4.2.2.RELEASE
spring-beans-4.2.2.RELEASE
spring-context-4.2.2.RELEASE
spring-context-support-4.2.2.RELEASE
spring-core-4.2.2.RELEASE
spring-expression-4.2.2.RELEASE
spring-instrument-4.2.2.RELEASE
spring-instrument-tomcat-4.2.2.RELEASE
spring-jdbc-4.2.2.RELEASE
spring-jms-4.2.2.RELEASE
spring-messaging-4.2.2.RELEASE
spring-orm-4.2.2.RELEASE
spring-oxm-4.2.2.RELEASE
spring-test-4.2.2.RELEASE
spring-tx-4.2.2.RELEASE
spring-web-4.2.2.RELEASE
spring-webmvc-4.2.2.RELEASE
spring-webmvc-portlet-4.2.2.RELEASE
spring-websocket-4.2.2.RELEASE

Note: to download jars file and config file
https://github.com/SunilChandra267/Frameworks

Spring Bean Containers/ IOC container
===============================
>The Spring container is at the core of the Spring Framework.
> The container will create the objects, wire them together and configure them.
> Spring container manages their complete life cycle from creation till destruction. 
>The Spring container uses DI to manage the components that make up an application.

there are 2 types of container 
1. BeanFactory (org.springframework.beans.factory.BeanFactory)
2. ApplicationContext (org.springframework.context.ApplicationContext)


Beans: Objects that are created and managed by Spring container are called beans.


Dependency Injection(DI)/Bean Wiring
===============================
>  Dependency Injection (DI) is a software design pattern that implements inversion of 
control for resolving dependencies.
> An injection is the passing of a dependency to a dependent object that would use it.
> In simple words Dependency Injection is  one of the mechanism used for initializing
   instance variables.
> Spring offers two ways to implement Dependency Injection
	1. Setter Injection: Injection of dependencies using setter method of the bean
	2. Constructor Injection: Injection of dependencies using constructors
> Using DI we can inject the folowing types of values
1. Primitives
2. String
3. Wrapper
4. Set
5. List
6. Map
7. User Defined Data types (i.e class types)

Dependency Injection of User Defined Data types
=======================================
>Dependency Injection of user defined data types is also known as "bean wiring".
>Bean wiring is a process of associating a bean. (Has-A relationship).
>Bean wiring can be done in 2 ways
	1.Explicit wiring: using xml(by using <property> tag for setter or <constructor-arg> for constructor 			injection).
	2. Implicit wiring: it can be done in 2 ways
			a. using xml(using "autowire" attribute of <bean> tag)	
			b. using annotations(using "@Autowired" spring annotation)

Explicit wiring
============
>it can be done by using "ref" attribute in both <property> and <constructor-arg>
> for setter injection 
	eg:
		 <bean id = "classA" class="org.jspiders.ClassA"/>
	     	 <bean id="classB" class="org.jspiders.ClassB">
			<property name = "a" ref="classA"/>
	     	 </bean>	
>for constructor injection
	eg:
		 <bean id = "classA" class="org.jspiders.ClassA"/>
	     	 <bean id="classB" class="org.jspiders.ClassB">
			<constructor-arg name="a" ref="classA"/>
	     	 </bean>
			
Implicit wiring(Bean Autowiring)
==========================
> The major drawback of explicit wiring is the bean wiring has to be done explicitly by the
	developer and requires too much of xml configuring for registering the beans and for wiring.
>if we use implicit wiring/autowiring container takes care of wiring
> it can be done in 2 ways
	
xml configuration(using autowire attribute in <bean>)
==========================================
>In this approach we register the beans is configuration xml file and the wiring will be done 
 implicitly by the container
>Eg: <bean id="classA" autowire="autowireType"/>

------------------------------------------------------------------------------------------------------------------
| autowiretype	|	how wiring will be done			|            
-------------------------------------------------------------------------------------------------------------------
|1.  no		| No implicit wiring will be done perform only explicit wiring. 	| 
|		|					             	|
|2. byName	| property name in the bean class and and bean id should be same	|
|		|	(Setter injection will be used).			|
|3.byType		|  property type in the bean class and type in the bean should be	|
|		|	same (Setter injection will be used).		|   
|4. constructor	|  parameter type of the constructor and bean type should be same|
|		|						|
|5. default		| it depends on the default-autowire attribute in <beans> tag.	|
------------------------------------------------------------------------------------------------------------------

Implicit wiring using annotations
==========================
>The basic idea of annotation is to avoid too much of lines in a xml (which looks complicated)
>it helps to do configuration in the same java file instead of using external files like (xml file)
> to enable annotation in spring use <context: annotation-config/> tag in the configuration  
   xml file.
> implicit wiring or autowiring can be done using any of the below approach
	> Spring annotations (@Autowired)
	> Java annotations(@Inject)

a. Using spring annotation "@Autowired"
=================================
> @Autowired annotation will do  autowiring byType;
> @Autowired annotation can be applied to
	1. fields
	2. constructor
	3. setter
	4. arbitrary methods

b. Using java annotation "@Inject"
============================
> @Inject is same as @Autowired
> @Inject will do autowiring byType.
>  this  annotation can be applied to
	1. fields
	2. constructor
	3. setter
	4. arbitrary methods




